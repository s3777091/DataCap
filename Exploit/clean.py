import json
import logging
import os
from openai import OpenAI, APIError

api_keys = [
    "sk-ebebb978f3d147a08ec8bcf45740c9b2",
    "sk-b36511c5bf3949c0ad885840179a8910"
]
crKey = 0

def get_client():
    if crKey < len(api_keys):
        return OpenAI(api_key=api_keys[crKey], base_url="https://api.deepseek.com/v1")
    else:
        logging.error("No valid API keys available. All API keys exhausted.")
        return None

def read(fp):
    try:
        with open(fp, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return [{"title": item['title'], "role": "user", "content": item['content']}
                    for item in data if 'content' in item and item['content'].strip()]
    except FileNotFoundError:
        logging.error(f"File not found: {fp}")
        return []
    except json.JSONDecodeError:
        logging.error(f"JSON decode error in file: {fp}")
        return []

def updateApi():
    global crKey
    crKey += 1
    if crKey < len(api_keys):
        logging.info(f"API key updated to new key: {api_keys[crKey]}")
        return True
    else:
        logging.error("All API keys exhausted.")
        return False

def call_api(ms):
    client = get_client()
    if not client:
        return None

    try:
        response = client.chat.completions.create(
            model="deepseek-coder",
            messages=[ms]
        )
        return {
            'title': ms['title'],
            'problem': ms['content'],
            'answer': [{'index': choice.index, 'content': choice.message.content} for choice in response.choices]
        }
    except APIError as e:
        if "Insufficient Quota" in str(e):
            logging.warning(f"Quota limit reached: {e}. Attempting to switch API key...")
            if updateApi():
                return call_api(ms)  # Recursion: retry with a new API key
        logging.error(f"API error occurred: {e}")
    except Exception as e:
        logging.error(f"Unexpected error occurred: {e}")
    return None

def process_messages(messages):
    results = []
    for msg in messages:
        result = call_api(msg)
        if result:
            results.append(result)
    return results

def save_results(results):
    os.makedirs('output', exist_ok=True)
    with open('output/results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=4)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    file_path = "../Exploit/data/45000-40001.json"
    messages = read(file_path)
    if messages:
        logging.info(f"Processing {len(messages)} messages...")
        results = process_messages(messages)
        if results:
            logging.info(f"Saving {len(results)} results...")
            save_results(results)
        else:
            logging.info("No results to save.")
    else:
        logging.error("No messages to process.")
