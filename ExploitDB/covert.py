import json
import os
import logging

# Set up logging
logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

def read_json_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            logging.debug("Successfully read input file.")
            return data
    except FileNotFoundError:
        logging.error(f"File not found: {file_path}")
        return []
    except json.JSONDecodeError:
        logging.error(f"JSON decode error in file: {file_path}")
        return []

def transform_json(input_data):
    transformed_data = []
    for item in input_data:
        if 'content' in item and item['content'].strip():
            instruction = item["content"].split('\n')[0]
            remaining_content = '\n'.join(item["content"].split('\n')[1:])
            transformed_item = {
                "instruction": instruction+'\n'+remaining_content,
                "output": ""
            }
            transformed_data.append(transformed_item)
            logging.debug(f"Transformed item: {transformed_item}")
    return transformed_data

def save_results(data):
    os.makedirs('output', exist_ok=True)
    output_path = os.path.join('output', 'results.json')
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)
            logging.debug(f"Output data successfully written to {output_path}.")
    except Exception as e:
        logging.error(f"Error writing JSON file: {e}")

# Input and output file paths
input_file_path = "52034-51801.json"

# Read input JSON from file
input_data = read_json_file(input_file_path)

# Check if data was read successfully
if input_data:
    logging.debug(f"Input data: {input_data}")  # Debug print to show the input data
    # Transform the JSON data
    transformed_data = transform_json(input_data)

    # Save the transformed JSON to the output file
    save_results(transformed_data)
else:
    logging.error("No data to transform.")
